{"version":3,"sources":["../src/index.js"],"names":["require","ApolloServer","baseUrl","urlParams","mapLinkBase","getLocation","apiKey","place","options","provider","geocoder","Promise","resolve","reject","geocode","err","res","city","country","lat","latitude","lng","longitude","coords","mapLink","getWeather","error","response","body","data","JSON","parse","summary","currently","temperature","apttemperature","apparentTemperature","timezone","time","icon","sunrise","daily","sunriseTime","sunset","sunsetTime","moonphase","moonPhase","typeDefs","resolvers","Query","location","root","args","context","process","env","GOOGLE","Location","weather","DARKSKY","schema","server","listen","then","url","console","log"],"mappings":";;AAKA;;AACA;;;;AAEA;;;;;;AARAA,QAAQ,SAAR;AACA;AACA;AACA;AACA;;eAGwBA,QAAQ,eAAR,C;IAAhBC,Y,YAAAA,Y;;AAGR;AACA,IAAMC,UAAU,mCAAhB;AACA,IAAMC,YAAY,yCAAlB;AACA,IAAMC,cAAc,iCAApB;;AAEA;AACA;AACA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,KAA7B,EAAoC;AAClC,MAAMC,UAAU;AACdC,cAAU,QADI;AAEdH;AAFc,GAAhB;;AAKA,MAAMI,WAAW,4BAAaF,OAAb,CAAjB;;AAEA,SAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCH,aAASI,OAAT,CAAiBP,KAAjB,EAAwB,UAACQ,GAAD,EAAMC,GAAN,EAAc;AACpC,UAAID,GAAJ,EAAS;AACPF,eAAOE,GAAP;AACD;AACD,UAAME,OAAOD,IAAI,CAAJ,EAAOC,IAApB;AACA,UAAMC,UAAUF,IAAI,CAAJ,EAAOE,OAAvB;AACA,UAAMC,MAAMH,IAAI,CAAJ,EAAOI,QAAnB;AACA,UAAMC,MAAML,IAAI,CAAJ,EAAOM,SAAnB;AACAV,cAAQ;AACNK,kBADM;AAENC,wBAFM;AAGNK,gBAAQ,CAACJ,GAAD,EAAME,GAAN,CAHF;AAING,sBAAYpB,WAAZ,GAA0Be,GAA1B,SAAiCE;AAJ3B,OAAR;AAMD,KAdD;AAeD,GAhBM,CAAP;AAiBD;;AAED;AACA,SAASI,UAAT,CAAoBnB,MAApB,EAA4BiB,MAA5B,EAAoC;AAClC,SAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,gCAAWX,OAAX,GAAqBI,MAArB,SAA+BiB,OAAO,CAAP,CAA/B,SAA4CA,OAAO,CAAP,CAA5C,GAAwDpB,SAAxD,EAAqE,UAACuB,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;AAC9F,UAAIF,KAAJ,EAAW;AACTb,eAAOa,KAAP;AACD;AACD,UAAMG,OAAOC,KAAKC,KAAL,CAAWH,IAAX,CAAb;AACA,UAAMI,UAAUH,KAAKI,SAAL,CAAeD,OAA/B;AACA,UAAME,cAAcL,KAAKI,SAAL,CAAeC,WAAnC;AACA,UAAMC,iBAAiBN,KAAKI,SAAL,CAAeG,mBAAtC;AACA,UAAMC,WAAWR,KAAKQ,QAAtB;AACA,UAAMC,OAAOT,KAAKI,SAAL,CAAeK,IAA5B;AACA,UAAMC,OAAOV,KAAKI,SAAL,CAAeM,IAA5B;AACA,UAAMC,UAAUX,KAAKY,KAAL,CAAWZ,IAAX,CAAgB,CAAhB,EAAmBa,WAAnC;AACA,UAAMC,SAASd,KAAKY,KAAL,CAAWZ,IAAX,CAAgB,CAAhB,EAAmBe,UAAlC;AACA,UAAMC,YAAYhB,KAAKY,KAAL,CAAWZ,IAAX,CAAgB,CAAhB,EAAmBiB,SAArC;AACAlC,cAAQ;AACNoB,wBADM;AAENE,gCAFM;AAGNX,sBAHM;AAINY,sCAJM;AAKNE,0BALM;AAMNC,kBANM;AAONC,kBAPM;AAQNC,wBARM;AASNG,sBATM;AAUNE;AAVM,OAAR;AAYD,KA1BD;AA2BD,GA5BM,CAAP;AA6BD;;AAED,IAAME,mbAAN;;AA2BA;AACA,IAAMC,YAAY;AAChBC,SAAO;AACLC,YADK,oBACIC,IADJ,EACUC,IADV,EACgBC,OADhB,EACyB;AAC5B,aAAOhD,YAAYiD,QAAQC,GAAR,CAAYC,MAAxB,EAAgCJ,KAAK7C,KAArC,CAAP;AACD;AAHI,GADS;AAMhBkD,YAAU;AACRC,WADQ,mBACAP,IADA,EACMC,IADN,EACYC,OADZ,EACqB;AAC3B,aAAO5B,WAAW6B,QAAQC,GAAR,CAAYI,OAAvB,EAAgCR,KAAK5B,MAArC,CAAP;AACD;AAHO;AANM,CAAlB;;AAaA,IAAMqC,SAAS,wCAAqB;AAClCb,oBADkC;AAElCC;AAFkC,CAArB,CAAf;;AAKA,IAAMa,SAAS,IAAI5D,YAAJ,CAAiB,EAAE2D,cAAF,EAAjB,CAAf;;AAEAC,OAAOC,MAAP,GAAgBC,IAAhB,CAAqB,gBAAa;AAAA,MAAVC,GAAU,QAAVA,GAAU;;AAChCC,UAAQC,GAAR,oCAAmCF,GAAnC;AACD,CAFD","file":"index.js","sourcesContent":["require('now-env');\n// Makes use of Google Maps geocoding API and Dark Sky weather API\n// Get API keys at https://console.developers.google.com & https://darksky.net/dev/\n// and add them to the server secrets\n// Feel free to reach out to me on Twitter @mattdionis or @motleydev with any questions!\nimport { makeExecutableSchema } from 'graphql-tools';\nimport NodeGeocoder from 'node-geocoder';\nconst { ApolloServer} = require('apollo-server');\nimport request from 'request';\n\n// Set the baseUrl and urlParams for Dark Sky API call\nconst baseUrl = 'https://api.darksky.net/forecast/';\nconst urlParams = '?units=us&exclude=minutely,hourly,flags';\nconst mapLinkBase = 'https://www.google.com/maps/?q=';\n\n// Geocode a place through node-geocoder and the Google Maps API\n// https://github.com/nchaulet/node-geocoder\nfunction getLocation(apiKey, place) {\n  const options = {\n    provider: 'google',\n    apiKey\n  };\n\n  const geocoder = NodeGeocoder(options);\n\n  return new Promise((resolve, reject) => {\n    geocoder.geocode(place, (err, res) => {\n      if (err) {\n        reject(err);\n      }\n      const city = res[0].city;\n      const country = res[0].country;\n      const lat = res[0].latitude;\n      const lng = res[0].longitude;\n      resolve({\n        city,\n        country,\n        coords: [lat, lng],\n        mapLink: `${mapLinkBase}${lat},${lng}`\n      });\n    });\n  });\n}\n\n// Pass the geographic coordinates of the location to the Dark Sky API to get current conditions\nfunction getWeather(apiKey, coords) {\n  return new Promise((resolve, reject) => {\n    request(`${baseUrl}${apiKey}/${coords[0]},${coords[1]}${urlParams}`, (error, response, body) => {\n      if (error) {\n        reject(error);\n      }\n      const data = JSON.parse(body);\n      const summary = data.currently.summary;\n      const temperature = data.currently.temperature;\n      const apttemperature = data.currently.apparentTemperature;\n      const timezone = data.timezone\n      const time = data.currently.time\n      const icon = data.currently.icon\n      const sunrise = data.daily.data[0].sunriseTime\n      const sunset = data.daily.data[0].sunsetTime\n      const moonphase = data.daily.data[0].moonPhase\n      resolve({\n        summary,\n        temperature,\n        coords,\n        apttemperature,\n        timezone,\n        time,\n        icon,\n        sunrise,\n        sunset,\n        moonphase,\n      });\n    });\n  });\n}\n\nconst typeDefs = `\n  type Query {\n    location(place: String!): Location\n  }\n\n  type Location {\n    city: String\n    country: String\n    coords: [Float]\n    mapLink: String\n    weather: Weather\n  }\n\n  type Weather {\n    summary: String\n    temperature: Float\n    coords: [Float]\n    apttemperature: Float\n    timezone: String\n    time: Int\n    icon: String\n    sunrise: Int\n    sunset: Int\n    moonphase: Float\n  }\n`;\n\n// Pass in the Google and Dark Sky API keys\nconst resolvers = {\n  Query: {\n    location(root, args, context) {\n      return getLocation(process.env.GOOGLE, args.place);\n    }\n  },\n  Location: {\n    weather(root, args, context) {\n      return getWeather(process.env.DARKSKY, root.coords);\n    }\n  }\n};\n\nconst schema = makeExecutableSchema({\n  typeDefs,\n  resolvers\n});\n\nconst server = new ApolloServer({ schema });\n\nserver.listen().then(({ url }) => {\n  console.log(`ğŸš€  Server ready at ${url}`);\n});"]}